name: Check DataRepository Commits

on:
  schedule:
    - cron: '0 */4 * * *'  # 매 4시간마다 실행
  workflow_dispatch:  # 수동으로 트리거할 수 있는 옵션

jobs:
  monitor_commits:
    runs-on: ubuntu-latest  # 실행할 환경

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3  # 리포지토리 체크아웃

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Node.js 버전 설정

      - name: Install dependencies
        run: npm install  # 의존성 설치 (axios 등)

      - name: Fetch commit details and update JSON
        run: |
          node -e "
          const axios = require('axios');
          const fs = require('fs');
          
          const githubToken = process.env.GITHUB_TOKEN; 
          const repoOwner = 'skson0x6ab';
          const githubRepository = 'DataRepository';
          const branchName = 'main';  
          const lastCommitTimeFilePath = 'lastCheckedCommitTime.json';
          const newCommitTimeFilePath = 'newCommitTime.json';
          
          const getCommitDetails = async () => {
            try {
              const githubApiUrl = \`https://api.github.com/repos/\${repoOwner}/\${githubRepository}/commits?sha=\${branchName}&per_page=1\`;
          
              const response = await axios.get(githubApiUrl, {
                headers: {
                  Authorization: \`Bearer \${githubToken}\`,
                },
              });
          
              if (response.data.length === 0) {
                console.log('No new commits detected. Setting empty JSON.');
                fs.writeFileSync(newCommitTimeFilePath, JSON.stringify({ newCommitTime: null }, null, 2));
                return;
              }
          
              const latestCommit = response.data[0];
              const commitDate = latestCommit.commit.author.date;
          
              // lastCheckedCommitTime.json 파일 읽기 (기존 데이터 로드)
              let lastCheckedCommitData = {};
              if (fs.existsSync(lastCommitTimeFilePath)) {
                const existingData = fs.readFileSync(lastCommitTimeFilePath);
                lastCheckedCommitData = JSON.parse(existingData);
              }
          
              const lastCheckedCommitTime = lastCheckedCommitData['lastCheckedCommitTime'];
          
              if (lastCheckedCommitTime !== commitDate) {
                console.log('New commit detected. Updating commit time.');
          
                // 새로운 커밋이 있을 경우, lastCheckedCommitTime.json 업데이트
                fs.writeFileSync(lastCommitTimeFilePath, JSON.stringify({ lastCheckedCommitTime: commitDate }, null, 2));
          
                // 새로운 커밋이 있을 경우, newCommitTime.json 업데이트
                fs.writeFileSync(newCommitTimeFilePath, JSON.stringify({ newCommitTime: commitDate }, null, 2));
              } else {
                console.log('No new commit. Keeping existing data.');
          
                // 새로운 커밋이 없을 경우, newCommitTime.json 빈값으로 설정
                fs.writeFileSync(newCommitTimeFilePath, JSON.stringify({ newCommitTime: null }, null, 2));
              }
          
            } catch (error) {
              console.error('Error fetching commits:', error.message);
            }
          };
          
          getCommitDetails();
          "

      - name: Commit and push updated JSON
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git add lastCheckedCommitTime.json newCommitTime.json
          git commit -m "Update commit time JSON files"
          git push

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub API 토큰을 GitHub Actions에서 제공되는 기본 토큰 사용
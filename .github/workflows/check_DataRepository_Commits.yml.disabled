name: Check DataRepository Commits

on:
  schedule:
    - cron: '30 */4 * * *'  # 매 4시간마다 실행
  workflow_dispatch:  # 수동으로 트리거할 수 있는 옵션

jobs:
  monitor_commits:
    runs-on: ubuntu-latest  # 실행할 환경

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3  # 리포지토리 체크아웃

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Node.js 버전 설정

      - name: Install dependencies
        run: npm install  # 의존성 설치 (axios 등)

      - name: Fetch commit details and update JSON files
        run: |
          node -e "
          const axios = require('axios');
          const fs = require('fs');
          
          const githubToken = process.env.GITHUB_TOKEN; 
          const repoOwner = 'skson0x6ab';
          const githubRepository = 'DataRepository';
          const branchName = 'main';  
          const lastCommitTimeFilePath = 'lastCheckedCommitTime.json';
          const newCommitTimeFilePath = 'newCommitTime.json';
          const chartJsonFilePath = 'chart.json';

          const getCommitDetails = async () => {
            try {
              const githubApiUrl = \`https://api.github.com/repos/\${repoOwner}/\${githubRepository}/commits?sha=\${branchName}&per_page=30\`;
          
              const response = await axios.get(githubApiUrl, {
                headers: {
                  Authorization: \`Bearer \${githubToken}\`
                },
              });
          
              if (response.data.length === 0) {
                console.log('No commits found.');
                return;
              }
          
              let lastCheckedCommitData = {};
              if (fs.existsSync(lastCommitTimeFilePath)) {
                const existingData = fs.readFileSync(lastCommitTimeFilePath);
                lastCheckedCommitData = JSON.parse(existingData);
              }
          
              const commitDetailsToUpdate = [];
              let lastCheckedCommitTime = lastCheckedCommitData['lastCheckedCommitTime'];

              // 커밋에 변경된 파일이 있는지 확인
              for (const commit of response.data) {
                const commitSha = commit.sha;
                const commitDate = commit.commit.author.date;

                // 커밋의 파일 변경 사항 확인
                const commitDetailUrl = \`https://api.github.com/repos/\${repoOwner}/\${githubRepository}/commits/\${commitSha}\`;
                const commitDetailResponse = await axios.get(commitDetailUrl, {
                  headers: { Authorization: \`Bearer \${githubToken}\` }
                });

                const filesChanged = commitDetailResponse.data.files ? commitDetailResponse.data.files.map(file => file.filename) : [];
          
                if (filesChanged.length > 0) {
                  if (lastCheckedCommitTime !== commitDate) {
                    commitDetailsToUpdate.push({
                      Date: commitDate,
                      Text: filesChanged.join(', ')  // 변경된 파일들을 한 줄로 결합
                    });

                    // lastCheckedCommitTime.json 업데이트
                    fs.writeFileSync(lastCommitTimeFilePath, JSON.stringify({ lastCheckedCommitTime: commitDate }, null, 2));
                  }
                }
              }
          
              if (commitDetailsToUpdate.length > 0) {
                // 새로운 커밋이 있을 경우, chart.json 파일 생성
                fs.writeFileSync(chartJsonFilePath, JSON.stringify(commitDetailsToUpdate, null, 2));
                console.log('Updated chart.json:', commitDetailsToUpdate);
              } else {
                // 변경된 파일이 없으면 빈 배열을 chart.json에 저장
                fs.writeFileSync(chartJsonFilePath, JSON.stringify([], null, 2));
                console.log('No changes found. Empty chart.json file.');
              }

              // 새로운 커밋이 있을 경우, newCommitTime.json 업데이트
              if (commitDetailsToUpdate.length > 0) {
                fs.writeFileSync(newCommitTimeFilePath, JSON.stringify({ newCommitTime: response.data[0].commit.author.date }, null, 2));
              } else {
                fs.writeFileSync(newCommitTimeFilePath, JSON.stringify({ newCommitTime: null }, null, 2));
              }
          
            } catch (error) {
              console.error('Error fetching commits:', error.message);
            }
          };
          
          getCommitDetails();
          "

      - name: Commit and push updated JSON files
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # 변경된 파일이 있을 경우에만 커밋
          git diff --exit-code || (git add chart.json newCommitTime.json && git commit -m "Update chart.json and newCommitTime.json" && git push)

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}